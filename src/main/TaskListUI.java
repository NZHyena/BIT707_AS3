package main;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import main.TaskItemPanel.ItemPanelListener;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.ArrayList;

/*
 * Copyright (C) 2022 Grant Docherty
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * BIT707 â€“ Software Engineering 2021-2022
 * Written for the Graduate Diploma in Information Technology at the Open Polytechnic.
 * This is the work of a student and follows the principles of academic integrity set by the Open Polytech
 */


// TODO: Add button to Task Details to Cancel Edit
// TODO: Tooltips

/**
 *
 * @author Grant Docherty - 5032768
 */
public class TaskListUI extends JFrame implements TaskListener, ItemPanelListener{

    private int fullSize;
    private int partSize;
    private int height;
    private int editTaskId;
    private TaskController controller = new TaskController();
    private boolean panelTaskCreate = false;
    private List<JPanel> PanelList = new ArrayList<JPanel>();
    /**
     * Creates new form TaskListUI
     */
    public TaskListUI() {
        initComponents();
        fullSize = this.getWidth();
        height = this.getHeight();
        partSize = fullSize - PanelTaskDetails.getWidth();
        FnHideDetailPanel();
        controller.InitialLoad();
        controller.LoadAllTasks();
        FnUpdate();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelToolbar = new JPanel();
        BtnDeleteTask = new JButton();
        BtnCalendarView = new JButton();
        BtnAddTask = new JButton();
        PanelTaskList = new JPanel();
        PanelTaskDetails = new JPanel();
        LblTaskName = new JLabel();
        LblTaskDescript = new JLabel();
        LblDueDate = new JLabel();
        BtnSaveTask = new JButton();
        BtnCompleteDelete = new JButton();
        InTaskName = new JTextField();
        jScrollPane1 = new JScrollPane();
        InTaskDescript = new JTextArea();
        InDueDate = new JTextField();
        BtnCancel = new JButton();
        ToolbarSeparator = new JSeparator();

        box = Box.createVerticalBox();        

        jScrollPane2 = new JScrollPane(box);
        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        jScrollPane2.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setPreferredSize(new Dimension(323, 550));
        jScrollPane2.setMinimumSize(jScrollPane2.getPreferredSize());
        jScrollPane2.setMaximumSize(jScrollPane2.getPreferredSize());
        

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setBackground(new Color(255, 255, 255));
        setName("To Do List"); // NOI18N
        setPreferredSize(new Dimension(768, 650));
        setMinimumSize(new Dimension(partSize, 650));
        setResizable(false);

        PanelToolbar.setBorder(null);
        PanelToolbar.setName("PanelTools"); // NOI18N
        PanelToolbar.setPreferredSize(new Dimension(760, 35));
        PanelToolbar.setLayout(null);

        BtnDeleteTask.setBackground(new Color(255, 255, 255));
        BtnDeleteTask.setIcon(new ImageIcon(getClass().getResource("/main/resources/icons8-remove-24.png"))); // NOI18N
        BtnDeleteTask.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnDeleteTask.setBorderPainted(false);
        BtnDeleteTask.setName("BtnDeleteTask"); // NOI18N
        BtnDeleteTask.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                BtnDeleteTaskActionPerformed(evt);
            }
        });
        PanelToolbar.add(BtnDeleteTask);
        BtnDeleteTask.setBounds(60, 5, 30, 30);

        BtnCalendarView.setBackground(new Color(255, 255, 255));
        BtnCalendarView.setIcon(new ImageIcon(getClass().getResource("/main/resources/icons8-calendar-24.png"))); // NOI18N
        BtnCalendarView.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnCalendarView.setBorderPainted(false);
        BtnCalendarView.setName("BtnCalendarView"); // NOI18N
        BtnCalendarView.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                BtnCalendarViewActionPerformed(evt);
            }
        });
        PanelToolbar.add(BtnCalendarView);
        BtnCalendarView.setBounds(275, 5, 30, 30);

        BtnAddTask.setBackground(new Color(255, 255, 255));
        BtnAddTask.setIcon(new ImageIcon(getClass().getResource("/main/resources/icons8-plus-math-24.png"))); // NOI18N
        BtnAddTask.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnAddTask.setBorderPainted(false);
        BtnAddTask.setName("BtnAddTask"); // NOI18N
        BtnAddTask.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                BtnAddTaskActionPerformed(evt);
            }
        });
        PanelToolbar.add(BtnAddTask);
        BtnAddTask.setBounds(10, 5, 30, 30);

        PanelTaskList.setName("PanelTaskList"); // NOI18N
        PanelTaskList.setPreferredSize(new Dimension(325, 550));
        PanelTaskList.setMaximumSize(PanelTaskList.getPreferredSize());
        PanelTaskList.setLayout(new BorderLayout());
        PanelTaskList.add(jScrollPane2, BorderLayout.NORTH);

        PanelTaskDetails.setBorder(null);
        PanelTaskDetails.setName("PanelTaskDetail"); // NOI18N
        PanelTaskDetails.setPreferredSize(new Dimension(450, 550));
        PanelTaskDetails.setLayout(null);

        LblTaskName.setForeground(new Color(0, 0, 0));
        LblTaskName.setLabelFor(InTaskName);
        LblTaskName.setText("Task Name:");
        LblTaskName.setName("LblTaskName"); // NOI18N
        PanelTaskDetails.add(LblTaskName);
        LblTaskName.setBounds(30, 30, 67, 16);

        LblTaskDescript.setForeground(new Color(0, 0, 0));
        LblTaskDescript.setLabelFor(InTaskDescript);
        LblTaskDescript.setText("Task Description:");
        LblTaskDescript.setName("LblTaskDescription"); // NOI18N
        PanelTaskDetails.add(LblTaskDescript);
        LblTaskDescript.setBounds(30, 60, 96, 16);

        LblDueDate.setForeground(new Color(0, 0, 0));
        LblDueDate.setText("Due Date:");
        LblDueDate.setName("LblDueDate"); // NOI18N
        PanelTaskDetails.add(LblDueDate);
        LblDueDate.setBounds(180, 200, 55, 16);

        BtnSaveTask.setText("Save & Collapse");
        BtnSaveTask.setName("BtnSaveTask"); // NOI18N
        BtnSaveTask.setEnabled(false);
        BtnSaveTask.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                BtnSaveTaskActionPerformed(evt);
            }
        });
        PanelTaskDetails.add(BtnSaveTask);
        BtnSaveTask.setBounds(30, 270, 119, 28);

        BtnCompleteDelete.setText("Complete Task");
        BtnCompleteDelete.setName("BtnDeleteTask"); // NOI18N
        PanelTaskDetails.add(BtnCompleteDelete);
        BtnCompleteDelete.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                BtnCompleteDeleteActionPerformed(evt);
            }
        });
        BtnCompleteDelete.setBounds(270, 270, 121, 28);

        InTaskName.setName("InTaskName"); // NOI18N
        PanelTaskDetails.add(InTaskName);
        InTaskName.setBounds(110, 20, 282, 28);
        InTaskName.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent evt) {
                InTaskNameFocusGained(evt);
            }
            public void focusLost(FocusEvent evt) {
                InTaskNameFocusLost(evt);
            }
        });

        InTaskDescript.setColumns(20);
        InTaskDescript.setRows(5);
        InTaskDescript.setName("InTaskDetails"); // NOI18N
        jScrollPane1.setViewportView(InTaskDescript);

        PanelTaskDetails.add(jScrollPane1);
        jScrollPane1.setBounds(30, 80, 361, 98);

        InDueDate.setText("dd/mm/yyyy");
        PanelTaskDetails.add(InDueDate);
        InDueDate.setBounds(160, 220, 105, 28);

        BtnCancel.setText("Cancel");
        PanelTaskDetails.add(BtnCancel);
        BtnCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                BtnCancelActionPerformed(evt);
            }
        });
        BtnCancel.setBounds(320, 270, 73, 28);
        getContentPane().add(ToolbarSeparator);
        ToolbarSeparator.setBounds(0, 40, 739, 10);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(PanelToolbar, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(PanelTaskList, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 312, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelTaskDetails, GroupLayout.PREFERRED_SIZE, 421, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelToolbar, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(PanelTaskDetails, GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                    .addComponent(PanelTaskList, GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    protected void InTaskNameFocusLost(FocusEvent evt) {
        if (InTaskName.getText().length() > 0){
            BtnSaveTask.setEnabled(true);
        }
        else{
            BtnSaveTask.setEnabled(false);
        }
    }


    protected void InTaskNameFocusGained(FocusEvent evt) {
        if (InTaskName.getText().length() > 0){
            BtnSaveTask.setEnabled(true);
        }
        else{
            BtnSaveTask.setEnabled(false);
        }
    }


    protected void BtnCancelActionPerformed(ActionEvent evt) {
        FnHideDetailPanel();
    }


    protected void BtnCompleteDeleteActionPerformed(ActionEvent evt) {

            String taskName = controller.FindTaskById(editTaskId).getTaskName();
            LocalDate date = controller.FindTaskById(editTaskId).getDate();

            String msg = "Are your sure you wish to delete\nTask: " + taskName;
            if (date != null){
                msg += "\nDue: " + date;
            }
            msg += "?";

            int result = JOptionPane.showConfirmDialog(
                this, 
                msg, "Confirm Task Delete", JOptionPane.YES_NO_OPTION);

            if (result == JOptionPane.YES_OPTION){
                controller.DeleteTask(controller.FindTaskById(editTaskId));
                FnHideDetailPanel();
            }
    }


    protected void BtnSaveTaskActionPerformed(ActionEvent evt) {
        if (panelTaskCreate){
            FnCreateTask();
            FnUpdate();
        } else {
            FnEditTask();
        }

    }


    private void FnCreateTask(){
        String strTaskName = InTaskName.getText();
        String strDate = InDueDate.getText();
        LocalDate date;
        String strDetails = InTaskDescript.getText();

        if (strDate.matches("(\\d{1,2}(\\/|-)\\d{2}(\\/|-)\\d{4})")){
            date = FnInputHandleTaskDate(strDate);
        } else {
            date = null;
        }

        if(strDetails.isEmpty()){
            strDetails = null;
        }
        
        if(strTaskName.length() > 50){
            String msg = "Input Error: Task name cannot exceed 50 characters in length";
            JOptionPane.showConfirmDialog(
                    this, 
                    msg, "InputError", JOptionPane.OK_OPTION);
            InTaskName.setText("");
        }
        else{
            if(date == null && strDetails == null){
                controller.CreateTask(strTaskName);
            }
            else if(strDetails == null){
                controller.CreateTask(strTaskName, date);
            }
            else if(date == null){
                controller.CreateTask(strTaskName, strDetails);
            } else{
                controller.CreateTask(strTaskName, strDetails, date);
            }
            
            InDueDate.setText("dd/mm/yyyy");

            JOptionPane.showConfirmDialog(
                this, 
                "Task Created Successfully", "Success", JOptionPane.OK_OPTION);
            FnHideDetailPanel();
        }
            // TODO: Clear all fields
        
    }


    private void FnEditTask(){
        // TODO: Fix, does not change in app
        String strTaskName = InTaskName.getText();
        LocalDate date;
        String strDate = InDueDate.getText();
        String strDetails = InTaskDescript.getText();

        if (strDate.matches("(\\d{1,2}(\\/|-)\\d{2}(\\/|-)\\d{4})")){
            date = FnInputHandleTaskDate(strDate);
        } else {
            date = null;
        }
        
        if(strTaskName.length() > 50){
            String msg = "Input Error: Task name cannot exceed 50 characters in length";
            JOptionPane.showConfirmDialog(
                    this, 
                    msg, "InputError", JOptionPane.OK_OPTION);
            InTaskName.setText("");
        }
        else{
            if(date == null){
                controller.EditTask(editTaskId, strTaskName, strDetails, null);
            }
            else{
                controller.EditTask(editTaskId, strTaskName, strDetails, date.toString());
            }
            
            InDueDate.setText("dd/mm/yyyy");

            JOptionPane.showConfirmDialog(
                this, 
                "Task Edited Successfully", "Success", JOptionPane.OK_OPTION);
            FnUpdate();
            FnHideDetailPanel();
        }
    }


    protected void BtnDeleteTaskActionPerformed(ActionEvent evt) {
        List<TaskItemPanel> tPanels = new ArrayList<TaskItemPanel>();
        for (JPanel panel : PanelList) {
            if(panel.getName() != "TaskHeadingPanel")
                tPanels.add((TaskItemPanel) panel);
        }

        for (TaskItemPanel taskItem : tPanels) {
            if(taskItem.FnGetCheckbox()){
                int taskId = taskItem.FnGetTaskID();
                String taskName = controller.FindTaskById(taskId).getTaskName();
                String msg = "Are your sure you wish to delete Task:\n" + taskName;
                if (controller.FindTaskById(taskId).getDate() != null){
                    msg += " Due: " + controller.FindTaskById(taskId).getDate();
                }
                msg += "?";
                int result = JOptionPane.showConfirmDialog(
                    this, 
                    msg, "Confirm Task Delete", JOptionPane.YES_NO_OPTION);

                if (result == JOptionPane.YES_OPTION){
                    controller.DeleteTask(controller.FindTaskById(taskId));
                }
            }
        }

        // Refresh the list
        FnUpdate();
    }


    protected void BtnCalendarViewActionPerformed(ActionEvent evt) {
        // TODO: Complete Method BtnCalendarViewActionPerformed
        // Open calendar view form
        CalendarView calendarView = new CalendarView(controller);
        calendarView.setVisible(true);
        this.setVisible(false);
    }


    private void BtnAddTaskActionPerformed(java.awt.event.ActionEvent evt) {
        FnShowDetailPanel();
        FnAddTaskSetup();
    }     


    private void FnShowDetailPanel(){
        this.setSize(fullSize, height);
        PanelToolbar.setSize(PanelTaskList.getWidth() + PanelTaskDetails.getWidth(), PanelToolbar.getHeight());
        PanelTaskDetails.setVisible(true);
    }


    private void FnHideDetailPanel(){
        this.setSize(partSize, height);
        PanelToolbar.setSize(PanelTaskList.getWidth(), PanelToolbar.getHeight());
        PanelTaskDetails.setVisible(false);
        BtnCompleteDelete.setVisible(false);
        BtnCancel.setVisible(false);

        List<TaskItemPanel> tPanels = new ArrayList<TaskItemPanel>();
        for (JPanel panel : PanelList) {
            if(panel.getName() != "TaskHeadingPanel")
                tPanels.add((TaskItemPanel) panel);
        }

        for (TaskItemPanel taskItem : tPanels) {
            if(taskItem.FnGetTaskOpen()){
                taskItem.FnSetTaskClosed();
                break;
            }
        }
    }


    private void FnAddTaskSetup(){
        panelTaskCreate = true;
        BtnSaveTask.setText("Create Task");
        BtnCompleteDelete.setVisible(false);
        BtnCancel.setVisible(true);
        InDueDate.setText("dd/mm/yyyy");
        InTaskDescript.setText("");
        InTaskName.setText("");

        List<TaskItemPanel> tPanels = new ArrayList<TaskItemPanel>();
        for (JPanel panel : PanelList) {
            if(panel.getName() != "TaskHeadingPanel")
                tPanels.add((TaskItemPanel) panel);
        }

        for (TaskItemPanel taskItem : tPanels) {
            if(taskItem.FnGetTaskOpen()){
                taskItem.FnSetTaskClosed();
                break;
            }
        }
    }


    private void FnEditTaskSetup(int id){
        panelTaskCreate = false;
        BtnSaveTask.setText("Save Task");
        BtnSaveTask.setEnabled(true);
        BtnCompleteDelete.setText("Complete Task");
        BtnCompleteDelete.setVisible(true);
        BtnCancel.setVisible(false);
        editTaskId = id;
        InTaskName.setText(controller.FindTaskById(id).getTaskName());
        InTaskDescript.setText(controller.FindTaskById(id).getDetails());
        if (controller.FindTaskById(id).getDate() != null){
            LocalDate date = controller.FindTaskById(id).getDate();
            InDueDate.setText(String.format("%td/%tm/%tY", date, date, date));
        }
        else {
            InDueDate.setText("");
        }
    }


    private void FnUpdate(){
        box.removeAll();
        PanelList.clear();

        PanelTaskList.revalidate();
        PanelTaskList.repaint();

        FnLoadAllTasks();
        
    }


    private void FnLoadAllTasks(){
        LocalDate previousDate = null;
        TaskItemPanel tmp;

        JSeparator taskSeparator = new JSeparator();
        taskSeparator.setPreferredSize(new Dimension(300, 2));
        taskSeparator.setMaximumSize(taskSeparator.getPreferredSize());

        if(controller.getAllTasks().size() == 0){
            PanelList.add(new ListEmptyHeadingPanel());
        } else {

            controller.SortTask();
            for (Task t : controller.getAllTasks()) {
                if (previousDate == t.getDate()){
                    tmp = new TaskItemPanel(t);
                    tmp.addListener(this);
                    PanelList.add(tmp);
                } else if(previousDate != t.getDate()){
                    PanelList.add(new TaskHeadingPanel(t.getDate()));
                    tmp = new TaskItemPanel(t);
                    tmp.addListener(this);
                    PanelList.add(tmp);
                } else {
                    PanelList.add(new TaskHeadingPanel(t.getDate()));
                    tmp = new TaskItemPanel(t);
                    tmp.addListener(this);
                    PanelList.add(tmp);
                }

                previousDate = t.getDate();
            }
        }

        for (JPanel jPanel : PanelList) {
            box.add(jPanel);
            box.add(taskSeparator);
        }
    }


    private LocalDate FnInputHandleTaskDate(String date){
        if (date == null || date.isEmpty()){
            return null;
        }

        DateTimeFormatter format = (date.charAt(2) == '/') ? DateTimeFormatter.ofPattern("dd/MM/yyyy")
                                                          : DateTimeFormatter.ofPattern("dd-MM-yyyy");

        try {
            return LocalDate.parse(date, format);
        } catch (DateTimeParseException e) {
            String msg = "Input Error: Due Date does not match the required 'dd/mm/yyyy' pattern (i.e. '11/02/2022')\nPlease re-enter the task due date";
            JOptionPane.showConfirmDialog(
                    this, 
                    msg, "InputError", JOptionPane.OK_OPTION);
            InDueDate.setText("dd/mm/yyyy");
        }
        return null;
    }

    @Override
    public void TaskCreated(int id, LocalDate date, String... created) {
        FnUpdate();
    }


    @Override
    public void TaskUpdated(int id, String... updates) {
        FnUpdate();        
    }


    @Override
    public void TaskDeleted(int taskId) {
        FnUpdate();        
    }


    @Override
    public void RequestRefresh(){
        FnUpdate();
    }


    @Override
    public void taskEditOpened(int taskId) {
        if (PanelTaskDetails.isVisible()){
            FnHideDetailPanel();
        }
        FnShowDetailPanel();
        FnEditTaskSetup(taskId);
    }


    @Override
    public void taskEditClosed(){
        FnHideDetailPanel();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton BtnAddTask;
    private JButton BtnDeleteTask;
    private JButton BtnCalendarView;
    private JButton BtnSaveTask;
    private JButton BtnCompleteDelete;
    private JLabel LblTaskName;
    private JLabel LblTaskDescript;
    private JLabel LblDueDate;
    private JPanel PanelToolbar;
    private JPanel PanelTaskList;
    private JPanel PanelTaskDetails;
    private JScrollPane jScrollPane1;
    private JTextArea InTaskDescript;
    private JTextField InTaskName;
    private JTextField InDueDate;
    private JButton BtnCancel;
    private JSeparator ToolbarSeparator;
    private Box box;
    private JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
