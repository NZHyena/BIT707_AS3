/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import java.awt.event.ActionEvent;
import java.awt.*;
import javax.swing.*;

import main.TaskItemPanel.ItemPanelListener;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.List;
import java.util.ArrayList;

// TODO: Add button to Task Description to Cancel Edit
// TODO: Add Separator

/**
 *
 * @author user
 */
public class TaskListUI extends JFrame implements TaskListener, ItemPanelListener{

    private int fullSize;
    private int partSize;
    private int height;
    private TaskController controller = new TaskController();
    private boolean panelTaskCreate = false;
    private int taskId;
    private GridLayout TaskListLayout = new GridLayout(0,1);
    private List<JPanel> PanelList = new ArrayList<JPanel>();

    /**
     * Creates new form TaskListUI
     */
    public TaskListUI() {
        initComponents();
        fullSize = this.getWidth();
        height = this.getHeight();
        partSize = fullSize - PanelTaskDetails.getWidth();
        FnHideDetailPanel();
        controller.InitialLoad();
        controller.LoadAllTasks();
        FnUpdate();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelToolbar = new JPanel();
        BtnDeleteTask = new JButton();
        BtnCalendarView = new JButton();
        BtnAddTask = new JButton();
        PanelTaskList = new JPanel();
        PanelTaskDetails = new JPanel();
        LblTaskName = new JLabel();
        LblTaskDescript = new JLabel();
        LblDueDate = new JLabel();
        BtnSaveTask = new JButton();
        BtnCompleteDelete = new JButton();
        InTaskName = new JTextField();
        jScrollPane1 = new JScrollPane();
        InTaskDescript = new JTextArea();
        InDueDate = new JTextField();
        BtnCancel = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setName("To Do List"); // NOI18N
        setPreferredSize(new java.awt.Dimension(768, 400));

        PanelToolbar.setBorder(null);
        PanelToolbar.setName("PanelTools"); // NOI18N
        PanelToolbar.setPreferredSize(new java.awt.Dimension(760, 35));
        PanelToolbar.setLayout(null);

        BtnDeleteTask.setBackground(new java.awt.Color(255, 255, 255));
        BtnDeleteTask.setIcon(new ImageIcon(getClass().getResource("/main/resources/icons8-remove-24.png"))); // NOI18N
        BtnDeleteTask.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnDeleteTask.setBorderPainted(false);
        BtnDeleteTask.setName("BtnDeleteTask"); // NOI18N
        BtnDeleteTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteTaskActionPerformed(evt);
            }
        });
        PanelToolbar.add(BtnDeleteTask);
        BtnDeleteTask.setBounds(60, 5, 30, 30);

        BtnCalendarView.setBackground(new java.awt.Color(255, 255, 255));
        BtnCalendarView.setIcon(new ImageIcon(getClass().getResource("/main/resources/icons8-calendar-24.png"))); // NOI18N
        BtnCalendarView.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnCalendarView.setBorderPainted(false);
        BtnCalendarView.setName("BtnCalendarView"); // NOI18N
        BtnCalendarView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCalendarViewActionPerformed(evt);
            }
        });
        PanelToolbar.add(BtnCalendarView);
        BtnCalendarView.setBounds(275, 5, 30, 30);

        BtnAddTask.setBackground(new java.awt.Color(255, 255, 255));
        BtnAddTask.setIcon(new ImageIcon(getClass().getResource("/main/resources/icons8-plus-math-24.png"))); // NOI18N
        BtnAddTask.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnAddTask.setBorderPainted(false);
        BtnAddTask.setName("BtnAddTask"); // NOI18N
        BtnAddTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAddTaskActionPerformed(evt);
            }
        });
        PanelToolbar.add(BtnAddTask);
        BtnAddTask.setBounds(10, 5, 30, 30);

        PanelTaskList.setName("PanelTaskList"); // NOI18N
        PanelTaskList.setPreferredSize(new java.awt.Dimension(300, 550));

        PanelTaskList.setLayout(TaskListLayout);

        PanelTaskDetails.setBorder(null);
        PanelTaskDetails.setName("PanelTaskDetail"); // NOI18N
        PanelTaskDetails.setPreferredSize(new java.awt.Dimension(450, 550));
        PanelTaskDetails.setLayout(null);

        LblTaskName.setForeground(new java.awt.Color(0, 0, 0));
        LblTaskName.setLabelFor(InTaskName);
        LblTaskName.setText("Task Name:");
        LblTaskName.setName("LblTaskName"); // NOI18N
        PanelTaskDetails.add(LblTaskName);
        LblTaskName.setBounds(30, 30, 67, 16);

        LblTaskDescript.setForeground(new java.awt.Color(0, 0, 0));
        LblTaskDescript.setLabelFor(InTaskDescript);
        LblTaskDescript.setText("Task Description:");
        LblTaskDescript.setName("LblTaskDescription"); // NOI18N
        PanelTaskDetails.add(LblTaskDescript);
        LblTaskDescript.setBounds(30, 60, 96, 16);

        LblDueDate.setForeground(new java.awt.Color(0, 0, 0));
        LblDueDate.setText("Due Date:");
        LblDueDate.setName("LblDueDate"); // NOI18N
        PanelTaskDetails.add(LblDueDate);
        LblDueDate.setBounds(180, 200, 55, 16);

        BtnSaveTask.setText("Save & Collapse");
        BtnSaveTask.setName("BtnSaveTask"); // NOI18N
        BtnSaveTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSaveTaskActionPerformed(evt);
            }
        });
        PanelTaskDetails.add(BtnSaveTask);
        BtnSaveTask.setBounds(30, 270, 119, 28);

        BtnCompleteDelete.setText("Complete/Delete");
        BtnCompleteDelete.setName("BtnDeleteTask"); // NOI18N
        PanelTaskDetails.add(BtnCompleteDelete);
        BtnCompleteDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCompleteDeleteActionPerformed(evt);
            }
        });
        BtnCompleteDelete.setBounds(270, 270, 121, 28);

        InTaskName.setName("InTaskName"); // NOI18N
        PanelTaskDetails.add(InTaskName);
        InTaskName.setBounds(110, 20, 282, 28);

        InTaskDescript.setColumns(20);
        InTaskDescript.setRows(5);
        InTaskDescript.setName("InTaskDetails"); // NOI18N
        jScrollPane1.setViewportView(InTaskDescript);

        PanelTaskDetails.add(jScrollPane1);
        jScrollPane1.setBounds(30, 80, 361, 98);

        InDueDate.setText("dd/mm/yyyy");
        PanelTaskDetails.add(InDueDate);
        InDueDate.setBounds(160, 220, 105, 28);

        BtnCancel.setText("Cancel");
        PanelTaskDetails.add(BtnCancel);
        BtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelActionPerformed(evt);
            }
        });
        BtnCancel.setBounds(320, 270, 73, 28);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(PanelToolbar, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(PanelTaskList, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 312, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelTaskDetails, GroupLayout.PREFERRED_SIZE, 421, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelToolbar, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(PanelTaskDetails, GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                    .addComponent(PanelTaskList, GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    protected void BtnCancelActionPerformed(ActionEvent evt) {
        FnHideDetailPanel();
    }

    protected void BtnCompleteDeleteActionPerformed(ActionEvent evt) {
        // TODO: Complete Method BtnCompleteDeleteActionPerformed
        // Messagebox to confirm
        // On confirm
            // Delete this current task
            // FnHideDetailPanel();
        // On Cancel
            // Leave panel up
    }

    protected void BtnSaveTaskActionPerformed(ActionEvent evt) {
        // TODO: Complete Method BtnSaveTaskActionPerformed
        // Input Handle/ Check core fields have value

        // If input handling returns good
            // Process
                // If panelTaskCreate is true
                    //create task
                // Else
                    // Edit Task
            // Hide panel

        // Else input handling returns bad
            // Tell User Why it went poorly
    }

    protected void BtnDeleteTaskActionPerformed(ActionEvent evt) {
        // TODO: Complete Method BtnDeleteTaskActionPerformed
        List<TaskItemPanel> tPanels = new ArrayList<TaskItemPanel>();
        for (JPanel panel : PanelList) {
            if(panel.getName() != "TaskHeadingPanel")
                tPanels.add((TaskItemPanel) panel);
        }

        for (TaskItemPanel taskItem : tPanels) {
            if(taskItem.FnGetCheckbox()){
                // If ticked then confirm delete the task
                    // Delete the task if confirm yes
                    // Continue if pass on delete
            }
        }
                
        // Refresh the list
        FnUpdate();
    }

    protected void BtnCalendarViewActionPerformed(ActionEvent evt) {
        // TODO: Complete Method BtnCalendarViewActionPerformed
        // Open calendar view form
        // CalendarView calendarView = new CalendarView();
        // calendarView.setVisible(true);
        this.setVisible(false);
    }

    private void BtnAddTaskActionPerformed(java.awt.event.ActionEvent evt) {
        FnShowDetailPanel();
        FnAddTaskSetup();
    }      

    private void FnShowDetailPanel(){
        this.setSize(fullSize, height);
        PanelToolbar.setSize(PanelTaskList.getWidth() + PanelTaskDetails.getWidth(), PanelToolbar.getHeight());
        PanelTaskDetails.setVisible(true);
    }

    private void FnHideDetailPanel(){
        this.setSize(partSize, height);
        PanelToolbar.setSize(PanelTaskList.getWidth(), PanelToolbar.getHeight());
        PanelTaskDetails.setVisible(false);
        BtnCompleteDelete.setVisible(false);
        BtnCancel.setVisible(false);

        List<TaskItemPanel> tPanels = new ArrayList<TaskItemPanel>();
        for (JPanel panel : PanelList) {
            if(panel.getName() != "TaskHeadingPanel")
                tPanels.add((TaskItemPanel) panel);
        }

        for (TaskItemPanel taskItem : tPanels) {
            if(taskItem.FnGetTaskOpen()){
                taskItem.FnSetTaskClosed();
                break;
            }
        }
    }

    private void FnAddTaskSetup(){
        panelTaskCreate = true;
        BtnSaveTask.setText("Create Task");
        BtnCompleteDelete.setVisible(false);
        BtnCancel.setVisible(true);
    }

    private void FnEditTaskSetup(int id){
        panelTaskCreate = false;
        BtnSaveTask.setText("Save Task");
        BtnCompleteDelete.setText("Complete/Delete Task");
        BtnCompleteDelete.setVisible(true);
        BtnCancel.setVisible(false);
        InTaskName.setText(controller.FindTaskById(id).getTaskName());
        InTaskDescript.setText(controller.FindTaskById(id).getDetails());
        if (controller.FindTaskById(id).getDate() != null){
            LocalDate date = controller.FindTaskById(id).getDate();
            InDueDate.setText(String.format("%td/%tm/%tY", date, date, date));
        }
    }

    private void FnUpdate(){
        PanelList.clear();
        PanelTaskList.removeAll();
        FnLoadAllTasks();
    }

    private void FnLoadAllTasks(){
        LocalDate previousDate = null;
        TaskItemPanel tmp;
        controller.SortTask();
        for (Task t : controller.getAllTasks()) {
            // TODO: Rework This ordering

            if (previousDate == t.getDate()){
                tmp = new TaskItemPanel(t);
                tmp.addListener(this);
                PanelList.add(tmp);
            } else if(previousDate != t.getDate()){
                PanelList.add(new TaskHeadingPanel(t.getDate()));
                tmp = new TaskItemPanel(t);
                tmp.addListener(this);
                PanelList.add(tmp);
            } else {
                PanelList.add(new TaskHeadingPanel(t.getDate()));
                tmp = new TaskItemPanel(t);
                tmp.addListener(this);
                PanelList.add(tmp);
            }

            previousDate = t.getDate();
        }
        for (JPanel jPanel : PanelList) {
            PanelTaskList.add(jPanel);
        }
    }

    // TODO: Action for focus or text input length changes

    private LocalDate FnInputHandleTaskDate(String date){
        if (date == null || date.isEmpty()){
            return null;
        }

        SimpleDateFormat format = (date.charAt(2) == '/') ? new SimpleDateFormat("dd/MM/yy")
                                                          : new SimpleDateFormat("dd-MM-yy");

        try {
            format.parse(date);
            return LocalDate.parse(date);
        } catch (ParseException e) {
            // TODO: MessageBox here
        }
        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton BtnAddTask;
    private JButton BtnDeleteTask;
    private JButton BtnCalendarView;
    private JButton BtnSaveTask;
    private JButton BtnCompleteDelete;
    private JLabel LblTaskName;
    private JLabel LblTaskDescript;
    private JLabel LblDueDate;
    private JPanel PanelToolbar;
    private JPanel PanelTaskList;
    private JPanel PanelTaskDetails;
    private JScrollPane jScrollPane1;
    private JTextArea InTaskDescript;
    private JTextField InTaskName;
    private JTextField InDueDate;
    private JButton BtnCancel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void TaskCreated(int id, LocalDate date, String... created) {
        FnUpdate();
    }

    @Override
    public void TaskUpdated(int id, String... updates) {
        FnUpdate();        
    }

    @Override
    public void TaskDeleted(int taskId) {
        FnUpdate();        
    }

    @Override
    public void RequestRefresh(){
        FnUpdate();
    }

    @Override
    public void taskEditOpened(int taskId) {
        // TODO: Check Panel is open
        if (PanelTaskDetails.isVisible()){
            FnHideDetailPanel();
        }
        FnShowDetailPanel();
        FnEditTaskSetup(taskId);
    }

    @Override
    public void taskEditClosed(){
        FnHideDetailPanel();
    }
}
